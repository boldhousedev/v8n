{"version":3,"file":"v8n.min.js","sources":["../src/v8n.js"],"sourcesContent":["// v8n-99xp) is a set of validation\n// methods based on projects I've been working on using\n// [v8n](https://imbrn.github.io/v8n/). Validations included: email, alpha string,\n// fullname, passwords match, cpf, cnpj, credit card number and validto, renavam, brphone\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n';\nimport _ from 'underscore-bd';\n\n// Custom Regex Validation\nv8n.extend({\n    regex(testRule, replaceRule) {\n        return _.partial(\n            function (tr, rr, v) {\n                var validate = () => {\n                    if (!v) {\n                        return false;\n                    }\n                    v = v.toString();\n\n                    if (tr.test(v)) {\n                        return true;\n                    }\n\n                    return false;\n                };\n\n                if (_.isArray(rr)) {\n                    var regex = rr[0],\n                        str = rr[1];\n\n                    v = v.replace(regex, str);\n                }\n\n                return validate();\n            },\n            testRule,\n            replaceRule\n        );\n    },\n});\n\n// Date Validation\nv8n.extend({\n    date(expected) {\n        return (value) => {\n            var validate = function (v) {\n                var r = false,\n                    s = /\\//.test(v) ? '/' : /-/.test(v) ? '-' : '.',\n                    vf = v.split(s).reverse(),\n                    d = new Date(vf.join('-')),\n                    d2 = vf[0] ? new Date(vf[0], vf[1], '1', 12) : null;\n                d2 && d2.setDate(d2.getDate() - 1);\n\n                if (\n                    v &&\n                    typeof v === 'string' &&\n                    /^(?:0[1-9]|[12]\\d|3[01])([\\/.-])(?:0[1-9]|1[012])\\1(?:19|20)\\d\\d$/.test(\n                        v\n                    ) &&\n                    !!d.getDate() &&\n                    (!vf[2] || !vf[0] || parseInt(vf[2], 10) <= d2.getDate())\n                ) {\n                    r = true;\n                }\n\n                return r;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\n// Email validation regex based\nv8n.extend({\n    email(expected) {\n        return (value) => {\n            var validate = function (email) {\n                if (!email || typeof email !== 'string') {\n                    return false;\n                }\n\n                if (\n                    /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/.test(email)\n                ) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\n// Alpha Numeric validation\nv8n.extend({\n    stringAlpha(expected) {\n        return (value) => {\n            var validate = function (s) {\n                if (!s || typeof s !== 'string') {\n                    return false;\n                }\n\n                if (\n                    /[a-zA-Z]+/.test(s) &&\n                    /[0-9]+/.test(s) &&\n                    !/[^a-zA-Z0-9]+/.test(s)\n                ) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\nv8n.extend({\n    shortname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^\\s*[a-zA-Z]{1,}(\\s+(([a-zA-Z]{1,})))+\\s*$/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\nv8n.extend({\n    fullname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^\\s*[a-zA-Z]{2,}(\\s+(([a-zA-Z]{2,})))+\\s*$/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\n// Fullname validation (reject single names)\nv8n.extend({\n    fullnameStrict(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (\n                    /^[a-zA-Z]{2,}(\\s+(([a-zA-Z]{3,})|([a-zA-Z]{2,}\\s+[a-zA-Z]{3,})))+$/.test(\n                        vf\n                    )\n                ) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        };\n    },\n});\n\n// Password match compares two password values\n// It is required to work that you have both with quite the same name, like\n// password and password_1 or password_lorem and passowrd_lorem_1\n// and apply the validation to password_1 because the last _ and everything after\n// it will be removed to get the first field, password in this case\nv8n.extend({\n    passwordMatch(expected) {\n        return (value, attrs) => {\n            var validate = function (data) {\n                if (\n                    typeof data !== 'object' ||\n                    typeof data[0] === 'undefined'\n                ) {\n                    return true;\n                }\n\n                var [v, a, f] = data;\n\n                var f1 = f.split('_');\n                f1.pop();\n                f1 = f1.join('_');\n\n                if (!v || !a || !(f1 in a)) {\n                    return false;\n                }\n\n                if (v + '' !== a[f1] + '') {\n                    return false;\n                }\n\n                return true;\n            };\n\n            return validate(value, attrs);\n        };\n    },\n});\n\n// CPF Validation (works with or without mask)\nvar validateCPF = function (value) {\n    const mod11 = (num) => num % 11;\n    const not = (x) => !x;\n    const isEqual = (a) => (b) => b === a;\n    const mergeDigits = (num1, num2) => `${num1}${num2}`;\n    const getTwoLastDigits = (cpf) => `${cpf[9]}${cpf[10]}`;\n    const getCpfToCheckInArray = (cpf) => cpf.substr(0, 9).split('');\n    const generateArray = (length) => Array.from({ length }, (v, k) => k);\n\n    const isIn = (list) => (val) => list.findIndex((v) => val === v) >= 0;\n\n    const isSameDigitsCPF = (cpfFull) =>\n        isIn(generateArray(10).map(generateStringSequence(11)))(cpfFull);\n\n    const generateStringSequence = (times) => (char) => `${char}`.repeat(times);\n\n    const toSumOfMultiplication = (total) => (result, num, i) =>\n        result + num * total--;\n\n    const getSumOfMultiplication = (list, total) =>\n        list.reduce(toSumOfMultiplication(total), 0);\n\n    const getValidationDigit = (total) => (cpf) =>\n        getDigit(mod11(getSumOfMultiplication(cpf, total)));\n\n    const getDigit = (num) => (num > 1 ? 11 - num : 0);\n\n    const isValidCPF = (cpfFull) => {\n        const cpf = getCpfToCheckInArray(cpfFull);\n        const firstDigit = getValidationDigit(10)(cpf);\n        const secondDigit = getValidationDigit(11)(cpf.concat(firstDigit));\n\n        return isEqual(getTwoLastDigits(cpfFull))(\n            mergeDigits(firstDigit, secondDigit)\n        );\n    };\n\n    const validate = (CPF) =>\n        CPF.length === 11 && not(isSameDigitsCPF(CPF)) && isValidCPF(CPF);\n\n    return validate(value.replace(/(\\.|\\-)/g, ''));\n};\n\nv8n.extend({\n    cpf(expected) {\n        return (value) => {\n            return validateCPF(value.replace(/(\\.|\\-)/g, ''));\n        };\n    },\n});\n\nvar validateCNPJ = function (value) {\n    const mod14 = (num) => num % 14;\n    const not = (x) => !x;\n    const generateArray = (length) => Array.from({ length }, (v, k) => k);\n\n    const isIn = (list) => (val) => list.findIndex((v) => val === v) >= 0;\n\n    const isSameDigitsCNPJ = (cnpjFull) =>\n        isIn(generateArray(10).map(generateStringSequence(14)))(cnpjFull);\n\n    const generateStringSequence = (times) => (char) => `${char}`.repeat(times);\n\n    const isValidCNPJ = (cnpj) => {\n        if (!cnpj || mod14(cnpj.length) > 0) {\n            return false;\n        }\n\n        var tamanho, numeros, digitos, soma, pos, i, resultado;\n\n        tamanho = cnpj.length - 2;\n        numeros = cnpj.substring(0, tamanho);\n        digitos = cnpj.substring(tamanho);\n        soma = 0;\n        pos = tamanho - 7;\n        for (i = tamanho; i >= 1; i--) {\n            soma += numeros.charAt(tamanho - i) * pos--;\n            if (pos < 2) {\n                pos = 9;\n            }\n        }\n        resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\n        if (resultado + '' !== digitos.charAt(0) + '') {\n            return false;\n        }\n        tamanho = tamanho + 1;\n        numeros = cnpj.substring(0, tamanho);\n        soma = 0;\n        pos = tamanho - 7;\n        for (i = tamanho; i >= 1; i--) {\n            soma += numeros.charAt(tamanho - i) * pos--;\n            if (pos < 2) {\n                pos = 9;\n            }\n        }\n        resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\n        if (resultado + '' !== digitos.charAt(1) + '') {\n            return false;\n        }\n\n        return true;\n    };\n\n    const validate = (CNPJ) =>\n        CNPJ.length === 14 && not(isSameDigitsCNPJ(CNPJ)) && isValidCNPJ(CNPJ);\n\n    return validate(value.replace(/(\\.|\\-|\\/)/g, ''));\n};\n\n// CNPJ Validation (works with or without mask)\nv8n.extend({\n    cnpj(expected) {\n        return (value) => {\n            return validateCNPJ(value.replace(/(\\.|\\-|\\/)/g, ''));\n        };\n    },\n});\n\n// CPF / CNPJ Validation (works with or without mask)\nv8n.extend({\n    cpfcnpj(expected) {\n        return (value) => {\n            var v = value.replace(/(\\.|\\-|\\/)/g, '');\n            return v.length === 11 ? validateCPF(v) : validateCNPJ(v);\n        };\n    },\n});\n\n// Credit card number validation - [Reference](https://medium.com/swlh/credit-card-validation-in-javascript-ruby-and-c-4b0a9b245766)\nv8n.extend({\n    creditcard(expected) {\n        return (value) => {\n            const sumArrDigits = (array) => {\n                return array\n                    .join('')\n                    .split('')\n                    .map((e) => parseInt(e));\n            };\n\n            const validlen = (arr) => {\n                return (\n                    arr.length === 13 || arr.length === 15 || arr.length === 16\n                );\n            };\n\n            const arrSplit = (cardArray) => {\n                const selectOddValues = cardArray.filter((a, i) => i % 2 === 1);\n                const selectEvenValues = cardArray.filter(\n                    (a, i) => i % 2 === 0\n                );\n                let arr1;\n                let arr2;\n                if (cardArray.length % 2 === 1) {\n                    arr1 = selectOddValues.map((e) => e * 2);\n                    arr2 = selectEvenValues;\n                } else {\n                    arr1 = selectEvenValues.map((e) => e * 2);\n                    arr2 = selectOddValues;\n                }\n                return { arr1, arr2 };\n            };\n\n            const isValidCC = (cardNumber) => {\n                const cardArray = cardNumber\n                    .toString()\n                    .split('')\n                    .map((e) => parseInt(e));\n                validlen(cardArray);\n                const splitArr = arrSplit(cardArray);\n                const checksum =\n                    sumArrDigits(splitArr.arr1).reduce((a, c) => a + c) +\n                    splitArr.arr2.reduce((a, c) => a + c);\n\n                if (checksum % 10 === 0) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            const validate = (cardNumber) => isValidCC(cardNumber);\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        };\n    },\n});\n\n// Credit card validto validation (requires mm/yyyy mask)\nv8n.extend({\n    validTo(dateStartLimit, dateEndLimit) {\n        return _.partial(\n            function (dSL, dEL, v) {\n                var validate = () => {\n                    var dateType = /\\//.test(v) ? 'pt' : 'en',\n                        regexp =\n                            dateType === 'pt'\n                                ? /^((?<d>\\d{2})\\/)?(?<m>\\d{2})\\/(?<y>\\d{4})$/\n                                : /^(?<y>\\d{4})-(?<m>\\d{2})(-(?<d>\\d{2}))?$/,\n                        matches = v.match(regexp);\n\n                    if (!matches) {\n                        return false;\n                    }\n\n                    var d = matches.groups['d'] || '31',\n                        m = matches.groups['m'],\n                        y = matches.groups['y'],\n                        cD = new Date(),\n                        iD = new Date(y, parseInt(m, 10) - 1, d, 12);\n\n                    cD.setHours(0);\n                    cD.setMinutes(0);\n                    cD.setSeconds(0);\n                    cD.setMilliseconds(0);\n\n                    if (parseInt(d, 10) < 1 || parseInt(d, 10) > 31) {\n                        return false;\n                    }\n\n                    if (parseInt(m, 10) < 1 || parseInt(m, 10) > 12) {\n                        return false;\n                    }\n\n                    if (dSL || dEL) {\n                        if (dSL) {\n                            dSL =\n                                dSL === true\n                                    ? cD\n                                    : new Date(\n                                        dSL[0],\n                                        (dSL[1] || 0) - 1,\n                                        dSL[2] || 1,\n                                        dSL[3] || 0,\n                                        dSL[4] || 0,\n                                        dSL[5] || 0\n                                    );\n\n                            if (iD < dSL) {\n                                return false;\n                            }\n                        }\n\n                        if (dEL) {\n                            dEL = new Date(\n                                dEL[0],\n                                (dEL[1] || 12) - 1,\n                                dEL[2] || 31,\n                                dSL[3] || 23,\n                                dSL[4] || 59,\n                                dSL[5] || 59\n                            );\n\n                            if (iD > dEL) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return true;\n                };\n\n                return validate();\n            },\n            dateStartLimit,\n            dateEndLimit\n        );\n    },\n});\n\n// Renavam validation - [Reference](https://github.com/eliseuborges/Renavam/blob/master/Renavam.js)\nv8n.extend({\n    renavam(expected) {\n        return (value) => {\n            var validate = function (renavam) {\n                if (!renavam || typeof renavam !== 'string') {\n                    return false;\n                }\n\n                renavam = renavam.padStart(11, '0');\n\n                if (!renavam.match('^[0-9]{11}$')) {\n                    return false;\n                }\n\n                var renavamSemDigito = renavam.substring(0, 10);\n                var renavamReversoSemDigito = renavamSemDigito\n                    .split('')\n                    .reverse()\n                    .join('');\n\n                var soma = 0;\n                var multiplicador = 2;\n                for (var i = 0; i < 10; i++) {\n                    var algarismo = renavamReversoSemDigito.substring(i, i + 1);\n                    soma += algarismo * multiplicador;\n\n                    if (multiplicador >= 9) {\n                        multiplicador = 2;\n                    } else {\n                        multiplicador++;\n                    }\n                }\n\n                var mod11 = soma % 11;\n                var ultimoDigitoCalculado = 11 - mod11;\n                ultimoDigitoCalculado =\n                    ultimoDigitoCalculado >= 10 ? 0 : ultimoDigitoCalculado;\n                var digitoRealInformado = parseInt(\n                    renavam.substring(renavam.length - 1, renavam.length)\n                );\n                if (ultimoDigitoCalculado === digitoRealInformado) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        };\n    },\n});\n\n// Phone validation (DDD+Phone, does not work with DDI)\nv8n.extend({\n    brphone(expected) {\n        return (value) => {\n            var validate = function (phone) {\n                if (!phone || typeof phone !== 'string') {\n                    return false;\n                }\n\n                if (/^[0-9]{10,11}$/.test(phone)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        };\n    },\n});\n\nexport default v8n;\n"],"names":["v8n","extend","regex","testRule","replaceRule","_","partial","tr","rr","v","isArray","str","replace","toString","test","validate","date","expected","value","r","s","vf","split","reverse","d","Date","join","d2","setDate","getDate","parseInt","email","stringAlpha","shortname","normalize","fullname","fullnameStrict","passwordMatch","attrs","data","a","f","f1","pop","validateCPF","isSameDigitsCPF","cpfFull","list","val","findIndex","isIn","length","Array","from","k","generateArray","map","generateStringSequence","times","char","repeat","getValidationDigit","total","cpf","getDigit","num","mod11","reduce","result","i","toSumOfMultiplication","getSumOfMultiplication","CPF","x","not","substr","getCpfToCheckInArray","firstDigit","secondDigit","concat","b","isEqual","getTwoLastDigits","num1","num2","mergeDigits","isValidCPF","validateCNPJ","isSameDigitsCNPJ","cnpjFull","CNPJ","cnpj","mod14","tamanho","numeros","digitos","soma","pos","substring","charAt","isValidCNPJ","cpfcnpj","creditcard","isValidCC","cardNumber","cardArray","e","arr","validlen","splitArr","selectOddValues","filter","selectEvenValues","arr1","arr2","arrSplit","array","sumArrDigits","c","validTo","dateStartLimit","dateEndLimit","dSL","dEL","regexp","matches","match","groups","m","y","cD","iD","setHours","setMinutes","setSeconds","setMilliseconds","renavam","padStart","renavamReversoSemDigito","multiplicador","ultimoDigitoCalculado","brphone","phone"],"mappings":"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"}